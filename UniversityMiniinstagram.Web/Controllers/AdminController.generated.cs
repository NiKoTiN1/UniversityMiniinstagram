// <auto-generated />
// This file was generated by R4Mvc.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the r4mvc.json file (i.e. the settings file), save it and run the generator tool again.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo.Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
#pragma warning disable 1591, 3008, 3009, 0108
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Routing;
using R4Mvc;

namespace UniversityMiniinstagram.Web.Controllers
{
    public partial class AdminController
    {
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected AdminController(Dummy d)
        {
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(IActionResult result)
        {
            var callInfo = result.GetR4ActionResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<IActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(IActionResult result)
        {
            var callInfo = result.GetR4ActionResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<IActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToPage(IActionResult result)
        {
            var callInfo = result.GetR4ActionResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToPage(Task<IActionResult> taskResult)
        {
            return RedirectToPage(taskResult.Result);
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToPagePermanent(IActionResult result)
        {
            var callInfo = result.GetR4ActionResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToPagePermanent(Task<IActionResult> taskResult)
        {
            return RedirectToPagePermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult SendReport()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.SendReport);
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult PardonPost()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.PardonPost);
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult PardonComment()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.PardonComment);
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult PostReportDecision()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.PostReportDecision);
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult CommentReportDecision()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.CommentReportDecision);
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult AddModerator()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.AddModerator);
        }

        [NonAction]
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public virtual IActionResult RemoveModerator()
        {
            return new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.RemoveModerator);
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public AdminController Actions => MVC.Admin;
        [GeneratedCode("R4Mvc", "1.0")]
        public readonly string Area = "";
        [GeneratedCode("R4Mvc", "1.0")]
        public readonly string Name = "Admin";
        [GeneratedCode("R4Mvc", "1.0")]
        public const string NameConst = "Admin";
        [GeneratedCode("R4Mvc", "1.0")]
        static readonly ActionNamesClass s_ActionNames = new ActionNamesClass();
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames => s_ActionNames;
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string SendReport = "SendReport";
            public readonly string GetPostReports = "GetPostReports";
            public readonly string GetCommentReports = "GetCommentReports";
            public readonly string SetDeleteRoles = "SetDeleteRoles";
            public readonly string Appeals = "Appeals";
            public readonly string PardonPost = "PardonPost";
            public readonly string PardonComment = "PardonComment";
            public readonly string PostReportDecision = "PostReportDecision";
            public readonly string CommentReportDecision = "CommentReportDecision";
            public readonly string AddModerator = "AddModerator";
            public readonly string RemoveModerator = "RemoveModerator";
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string SendReport = "SendReport";
            public const string GetPostReports = "GetPostReports";
            public const string GetCommentReports = "GetCommentReports";
            public const string SetDeleteRoles = "SetDeleteRoles";
            public const string Appeals = "Appeals";
            public const string PardonPost = "PardonPost";
            public const string PardonComment = "PardonComment";
            public const string PostReportDecision = "PostReportDecision";
            public const string CommentReportDecision = "CommentReportDecision";
            public const string AddModerator = "AddModerator";
            public const string RemoveModerator = "RemoveModerator";
        }

        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames => s_ViewNames;
            public class _ViewNamesClass
            {
                public readonly string Appeals = "Appeals";
                public readonly string GetCommentReports = "GetCommentReports";
                public readonly string GetPostReports = "GetPostReports";
                public readonly string SetDeleteRoles = "SetDeleteRoles";
            }

            public readonly string Appeals = "~/Views/Admin/Appeals.cshtml";
            public readonly string GetCommentReports = "~/Views/Admin/GetCommentReports.cshtml";
            public readonly string GetPostReports = "~/Views/Admin/GetPostReports.cshtml";
            public readonly string SetDeleteRoles = "~/Views/Admin/SetDeleteRoles.cshtml";
        }

        [GeneratedCode("R4Mvc", "1.0")]
        static readonly ViewsClass s_Views = new ViewsClass();
        [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
        public ViewsClass Views => s_Views;
    }

    [GeneratedCode("R4Mvc", "1.0"), DebuggerNonUserCode]
    public partial class R4MVC_AdminController : UniversityMiniinstagram.Web.Controllers.AdminController
    {
        public R4MVC_AdminController(): base(Dummy.Instance)
        {
        }

        [NonAction]
        partial void SendReportOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo, string userId, string postId, string commentId);
        [NonAction]
        public override System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult> SendReport(string userId, string postId, string commentId)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.SendReport);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userId", userId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "postId", postId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "commentId", commentId);
            SendReportOverride(callInfo, userId, postId, commentId);
            return System.Threading.Tasks.Task.FromResult<Microsoft.AspNetCore.Mvc.ActionResult>(callInfo);
        }

        [NonAction]
        partial void GetPostReportsOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo);
        [NonAction]
        public override System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult> GetPostReports()
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.GetPostReports);
            GetPostReportsOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult<Microsoft.AspNetCore.Mvc.ActionResult>(callInfo);
        }

        [NonAction]
        partial void GetCommentReportsOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo);
        [NonAction]
        public override System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult> GetCommentReports()
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.GetCommentReports);
            GetCommentReportsOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult<Microsoft.AspNetCore.Mvc.ActionResult>(callInfo);
        }

        [NonAction]
        partial void SetDeleteRolesOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo);
        [NonAction]
        public override System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult> SetDeleteRoles()
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.SetDeleteRoles);
            SetDeleteRolesOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult<Microsoft.AspNetCore.Mvc.ActionResult>(callInfo);
        }

        [NonAction]
        partial void AppealsOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo);
        [NonAction]
        public override Microsoft.AspNetCore.Mvc.ActionResult Appeals()
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.Appeals);
            AppealsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void PardonPostOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo, string reportId);
        [NonAction]
        public override System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> PardonPost(string reportId)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.PardonPost);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "reportId", reportId);
            PardonPostOverride(callInfo, reportId);
            return System.Threading.Tasks.Task.FromResult<Microsoft.AspNetCore.Mvc.IActionResult>(callInfo);
        }

        [NonAction]
        partial void PardonCommentOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo, string reportId);
        [NonAction]
        public override System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> PardonComment(string reportId)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.PardonComment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "reportId", reportId);
            PardonCommentOverride(callInfo, reportId);
            return System.Threading.Tasks.Task.FromResult<Microsoft.AspNetCore.Mvc.IActionResult>(callInfo);
        }

        [NonAction]
        partial void PostReportDecisionOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo, string reportId, bool isBanUser, bool isDeletePost, bool isHidePost);
        [NonAction]
        public override System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> PostReportDecision(string reportId, bool isBanUser, bool isDeletePost, bool isHidePost)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.PostReportDecision);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "reportId", reportId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isBanUser", isBanUser);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isDeletePost", isDeletePost);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isHidePost", isHidePost);
            PostReportDecisionOverride(callInfo, reportId, isBanUser, isDeletePost, isHidePost);
            return System.Threading.Tasks.Task.FromResult<Microsoft.AspNetCore.Mvc.IActionResult>(callInfo);
        }

        [NonAction]
        partial void CommentReportDecisionOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo, string reportId, bool isHideComment, bool isDeleteComment, bool isBanUser, bool isDeletePost, bool isHidePost);
        [NonAction]
        public override System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> CommentReportDecision(string reportId, bool isHideComment, bool isDeleteComment, bool isBanUser, bool isDeletePost, bool isHidePost)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.CommentReportDecision);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "reportId", reportId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isHideComment", isHideComment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isDeleteComment", isDeleteComment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isBanUser", isBanUser);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isDeletePost", isDeletePost);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isHidePost", isHidePost);
            CommentReportDecisionOverride(callInfo, reportId, isHideComment, isDeleteComment, isBanUser, isDeletePost, isHidePost);
            return System.Threading.Tasks.Task.FromResult<Microsoft.AspNetCore.Mvc.IActionResult>(callInfo);
        }

        [NonAction]
        partial void AddModeratorOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo, string userId);
        [NonAction]
        public override System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> AddModerator(string userId)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.AddModerator);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userId", userId);
            AddModeratorOverride(callInfo, userId);
            return System.Threading.Tasks.Task.FromResult<Microsoft.AspNetCore.Mvc.IActionResult>(callInfo);
        }

        [NonAction]
        partial void RemoveModeratorOverride(R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult callInfo, string userId);
        [NonAction]
        public override System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> RemoveModerator(string userId)
        {
            var callInfo = new R4Mvc_Microsoft_AspNetCore_Mvc_ActionResult(Area, Name, ActionNames.RemoveModerator);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userId", userId);
            RemoveModeratorOverride(callInfo, userId);
            return System.Threading.Tasks.Task.FromResult<Microsoft.AspNetCore.Mvc.IActionResult>(callInfo);
        }
    }
}
#pragma warning restore 1591, 3008, 3009, 0108
